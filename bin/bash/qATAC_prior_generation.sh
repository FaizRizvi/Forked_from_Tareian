Quantitative ATAC-seq prior generation:

------------

Need a set of reference peaks that are annotated with motif occurrences, and sets of
peaks with interesting patterns:

After running basic ATAC-seq mapping scripts (Nick Carriero's adaptation of my pipeline),
run scripts in ATACseq_peakAnnotation_notes.txt scripts to get peak annotations.  One of 
the key outputs for the quantitative ATAC-seq pipeline is:

** an annotation file for each peak (motif occurrences, nearby genes) in the form
of a .txt document and a python dictionary saved as a .p pickle object (see
https://docs.python.org/2/library/pickle.html)

ATACs15_max4_annoTable_bp10000.txt
ATACs15_max4_annoTable_bp10000.p

Columns in .txt correspond to:
Peak	PeakLength	TF_motif_pval,qval,quartile	NearestTSS	NearestTSSDistance	GeneBodiesWithin10000bp	
NearestExpressedTSS	NearestExpressedTSSDistance	ExpressedGeneBodiesWithin10000bp

.p is a python dictionary where keys are peaks from the reference bed file
and items are:
PeakLength	TF_motif_pval,qval,quartile	NearestTSS	NearestTSSDistance	GeneBodiesWithin10000bp	
NearestExpressedTSS	NearestExpressedTSSDistance	ExpressedGeneBodiesWithin10000bp

EXAMPLE:
/mnt/hdfs/emiraldi/maria/HTSeqCounts/ATAC_mm10/Th17_48h_max4$ ls -1 *annoTable*
Th17_48h_max4_annoTable_bp10000.p
Th17_48h_max4_annoTable_bp10000.txt

** You will also need two more dictionaries: motifDic.p and peakDic.p (see below)
and supply the directory for these dictionaries in the driver script (run_motifEnrich_Nets... .sh)
#  -- directory where these peak and motif annotations sit:
# 	peakDic[peak][motif] = (rawp, adj, quantile, location)
# 	motifDic[motif] = (rawp list, adj p list)
# 	(stored as motifDic.p, peakDic.p, as generated by makeMotifDics.py, driven by
# 	all_ATAC_peaksOnly_annotate_bg_qval.sh)

EXAMPLE:
/mnt/hdfs/emiraldi/maria/priors_1_qval/ATAC_mm10/Th17_48h_max4
Folder: FimoPeak_anno -- contains .txt files of peak - motif find intersections, but most importantly
motifDic.p  peakDic.p, which tell you peak <--> motif mappings


** Clusters of peaks (could be based on differential analysis, e.g., DESeq2):
From this starting point you can run DESeq2 to get sets of differentially accessible peaks.

You will also likely want to annotate your DESeq2 results, so that, in addition to having
a table of intensities, p-values, etc., you also have information about motif occurrences.
You can see how I use the above annotation files in this function, which also runs DESeq2:
/Users/emiraldi/erm/MariaP/bin/deseq2_arrayATAC.sh

Here's a link to my "bin" directory, which has all of my scripts in it.  Some are more
polished than others (so please don't judge!  and I welcome any improvements to the code base!):

https://www.dropbox.com/sh/u5707jzx4tbynyb/AABCOZKFhZz5vYDBku7VjPaoa?dl=0
OR on the cluster:
/mnt/xfs1/home/emiraldi/maria/bin

Note I also used clustering analysis to identify peaks with interesting patterns.  I didn't 
get it work, but I think the approach has promise and I have ideas about how to go about
better.  Let me know if you're interested in this!

------------
Need gene sets (differentially expressed genes):

Used DESeq2 FDR = 10%, log2|FC| > 1, for comparisons that I thought would be biologically
	meaningful to networks (e.g., genes expressed only in Th17, by both Th17 and Th0,...)
	Could also use clusters, but initial clustering results were not promising --> I would
		prefer to use clusters to define sets because the procedure would be more automatic.
		Anyone who would like to experiment, please do!
	You could also use DESeq2 defined gene sets to get differentially expressed TFs, but 
		then use clustering to define gene clusters (to search for TF motif enrichment to
		accessible peaks cis to genes).  This would be worth trying.

-------------
Need sets of expressed genes:
	
Although you will be especially interested in differentially expressed TFs (belonging to class above); 
however, given the importance of PTMs, it's important to consider the pool of expressed
genes under given conditions.  So you should get a set of likely-to-be expressed genes.
Here's how I do it from DESeq2 output (you could do something similar for FPKM):

I use the following scripts to get a list of "expressed genes", which I basically define 
as 2X-read coverage and ends up being 80 for gene-length-normalized DESeq2 reads:

/Users/emiraldi/erm/MariaP/bin/lengthNormalizeDESeq2counts.py
(run automatically be deseq2_arrayRNA.sh, when I run my DESEq2 pipeline.)
Depends on a file that Nick Carriero generated, which contains HTSeq effective gene lengths 
(number of mappable bases per gene, where exons must be unique to the gene feature), this 
file was generated for 50bp SE reads:
effectiveGeneLengthFile="/mnt/hdfs/emiraldi/GenomeInf/mm10/mm10_HTSeqEffGeneLengths.txt"
Column 1 = gene name
Column 2 = total uniquely mapping sites possible for the given gene (intersecting exons from other 
		genes subtracted)
Column 3 = the original uniquely mapping length, original length in parentheses, and other 
	genes whose exons intersect with the given gene and the original length of those genes
I don't think HTSeq-count intelligently deals with paired end reads.  Once paired end
	reads are mapped by bowtie/star, etc., the mate information isn't used to determine
	whether a single read could only belong to one of two partially overlapping transcripts.
	Anyone who wants to improve this please do!
	
Note, I automatically get length-normalized counts from DESeq2, as well as some other details
	about mapping, if you're interested in the full pipeline:
	
/Users/emiraldi/erm/MariaP/bin/deseq2_arrayRNA.sh
	
You might like this shell script that drives python scripts to get lists of genes 
expressed for specified conditions in a table of gene-length-normalized reads.  You supply
the search key using a regular expression corresponding to the column(s) of interest:
/Users/emiraldi/erm/MariaP/bin/getExpGenePerCond.sh

---------------

Convert gene sets to peak sets with this script as an example:

/Users/emiraldi/erm/MariaP/bin/convert2peaksets_geneSets_Th1748h.sh

Once gene names are put in terms of ATAC-seq peaks, we can start doing enrichment analysis
to see whether, for example, there is a surprising number of a particular TF's motif 
occurrence cis to a set of genes.  We can also leverage quantitative peak information, 
and focus on sets of peaks with particular patterns (e.g., increased in accessibility
cis to genes that are increased in expression).  Thus, we need to map genes to our reference 
peak list, and not the other way around.

Sometimes it's necessary to convert reference peak sets, in which case this related function
is useful:

/Users/emiraldi/erm/MariaP/bin/convert2peaksets_peakBeds_Th1748h.sh

--------------

Design an "enrichment key file"

Example, called "netKey.txt", can be found here:
https://www.dropbox.com/sh/kszqvlqm55lbrfc/AACg_ieZGE6YhGsMOzRnFqJsa?dl=0

Each row corresponds to a network made by looking at enrichments between a 
	a particular gene set (peaks cis to a set of genes, the name should match the .txt
	files corresponding to the gene sets you defined above), a particular ATAC-seq peak set
	(could be "All" or could be a set defined and wiht a matching name to some of your
	ATAC-seq peaks sets of interested (e.g., peaks increased in a particular cell type).
Columns correspond to:
EdgeWeight	NetName	PeakSet	TFset	targGenes	...additionalInf
	targGenes -- gene set name, you'll be looking at ATAC-seq peaks cis to these genes
		name should match the .txt / .bed files in your gene set folder
	PeakSet -- peak set name, specify "All" if you want to look at all accessible regions
		in your reference .bed set OR specificy the name of one of the sets of peaks in the
		.bed file directory
	TFset -- should also be a gene set, and it will determine which TFs motifs you'll 
		test for enrichment.  You specify this separately to targGenes, because, while you
		might be interested in peaks cis to differential genes, you might be interested in
		any TF expressed at a certain level in a given condition.  (Although you'd probably
		have more confidence in TFs that were also differentially expressed.)
	NetName -- a unique name for the TF-target interactions derrived from that row's 
		enrichment analysis
	EdgeWeight -- You can set this for the TF-target gene interaction.  I believe TF-target
		interactions to varying extents, depending on the enrichment analysis.  For example,
		I have highest confidence in TFs that are increased in expression and have motifs 
		enriched in peaks increased in accessibility cis to differential genes (generally 
		have NetName appended with _deTFdA for diff TF exp + diff Accessibility); thus, I 
		set a score of "4".  I set a score of "3" for TFs that are expressed whose motif 
		is enriched cis to peaks with increased in accessibility cis to differential genes
		genes (called _dA for diff. accessibility).  Score of "2" for differentially 
		expressed TFs whos motif is found enriched in peaks (all peaks, not limited to 
		a subset pattern), and I call these deTF (for differential TF only).  Finally, 
		score of "1" for expressed TFs that are enriched in peaks cis to the given gene set
		(all peaks considered), and include "_noDiff" in the net name.  This scale is 
		arbitrary, but later I use it when putting these subnetworks together.
	...additionalInf -- you can specify a subset or associate all of the genes in the 
		targGenes with a "best guess" interaction sign.  For example, if my targGenes set
		were all genes that were differentially expressed (increased or decreased) in Th17
		cells, and my TFset were all TFs increased in expression in Th17, and the peak set
		were all peaks with increased accessiblity in Th17, then, if there is an 
		enrichment for a given TF, then I would suspect that there was an activitating 
		interaction for target genes with increased expression and an inhibitory 
		interaction for target genes with decreased expression.  Thus, I could specify
		the increased gene set (should match a set of genes in your gene expression
		list, call it Th17_up) and the decreased gene set (call it Th17_down) in this column
		as "+Th17_up -Th17_down" (tab separated), so that the edge weights get the 
		weights that make the most sense.
		If no "additionalInf is supplied, positive edge is assumed

-----------------	

Do motif enrichment analyses and generate priors:

run_motifEnrich_Nets_ILCs.sh

This script runs 4 python scripts.  Each has a usage description, but I'll summarize here:

1.  motifEnrichments_ATAC_RNA.py -- actually does the enrichment analysis, finds out 
which subset of genes in an enriched gene set have a motif cis (e.g., are responsible for
the enrichment -- you could imagine declaring all genes in the cluster TF targets, but
I've found being conservative works better -- you're welcome to change this though.)  NOTE:
this function will do enrichment analysis on all sets in the gene set and peak set 
directory.  The netKey.txt files will be used in steps 3. and 4.

NOTE: the above script assumes that you've generated your Gene set .bed files with something like:
/Users/emiraldi/erm/MariaP/bin/convert2peaksets_geneSets_Th1748h.sh
and will expect the word "body" in the gene set .bed files...  

2.  motifEnrichmentsVis_ATAC_RNA.py -- generates tables to help you visualize results from
Step 1.  Tables show the number peaks that intersect between gene and ATAC-seq sets,
the signficance of the overlap among the peak sets -- useful for interpreting the TF 
enrichment analyses in each of these ATAC-gene sets.  Tables of the TFs appearing in
each of these ATAC-gene sets.

3.  motifEnrichments_txnNets.py -- get priors for intersections of ATAC peaksets and 
gene sets described in netKey.txt files.  Output will be a column-format network file,
where columns correspond to:
Regulator	Target	-log10(min(Praw))*dir	PeakSetSupport	AllMotifPvals	Motifs	MotifTf
They will be named: Int_"user supplied network name from netKey.txt".txt files

4.  motifEnrichments_txnNets_famShare.py -- same as above, except that it allows for 
sharing of motifs among subfamily members.  Helpful, if, say, you don't have a motif for
a particular TF of interest.  In practice, I have more faith in the Step 3 function, as
there does seem to be some specificity to specific subfamily members individual motifs, 
and I had better recover of the Th17 network when I didn't share subfamily information.  
You could imagine a compromise between Step 3 and Step 4 functions, and maybe weight Step
4 prior less, or only share information if no motif exists for a specific TF...  this might
merit some testing

Some of the inputs are described above, but the motif_database directory, you can download
from here:

https://www.dropbox.com/sh/vqh9zhcnvrcja1e/AADzH4o4-Iwf5jduviJShIvOa?dl=0

The list of mouse DNA binding proteins is here -- I have included multiple sources, 
beginning with GO terms and ending with TFClass mouse TFs database.  This list might still
be incomplete though:

https://www.dropbox.com/s/14mom8idfzwg5z4/DNA_binding_final4Matlab.txt?dl=0